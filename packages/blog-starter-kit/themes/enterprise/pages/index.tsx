import React from 'react';
import { addPublicationJsonLd } from '@starter-kit/utils/seo/addPublicationJsonLd';
import { getAutogeneratedPublicationOG } from '@starter-kit/utils/social/og';
import request from 'graphql-request';
import { GetStaticProps } from 'next';
import dynamic from 'next/dynamic';
import Head from 'next/head';
import Link from 'next/link';
import { Container } from '../components/container';
import { AppProvider } from '../components/contexts/appContext';
import { Footer } from '../components/footer';
import { Header } from '../components/header';
import { Layout } from '../components/layout';
import AnimatedHeroSection from '../components/network-hero';
import {
  PostsByPublicationDocument,
  PostsByPublicationQuery,
  PostsByPublicationQueryVariables,
  PublicationFragment,
} from '../generated/graphql';

const GQL_ENDPOINT = process.env.NEXT_PUBLIC_HASHNODE_GQL_ENDPOINT;

const SubscribeForm = dynamic(() =>
  import('../components/subscribe-form').then((mod) => mod.SubscribeForm),
);




// Simple arrow icon component
const ArrowRight = () => (
  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" className="w-5 h-5">
    <line x1="5" y1="12" x2="19" y2="12" />
    <polyline points="12 5 19 12 12 19" />
  </svg>
);

type Props = {
  publication: PublicationFragment;
};

const blogCategories = [
  {
    title: "Network Automation",
    description: "Practical guides and tutorials on automating network tasks using Python, Ansible, and more.",
    icon: "ü§ñ"
  },
  {
    title: "Cloud Infrastructure",
    description: "Hands-on labs and best practices for working with AWS, Azure, and GCP.",
    icon: "‚òÅÔ∏è"
  },
  {
    title: "DevOps Practices",
    description: "Real-world examples of implementing DevOps principles in network operations.",
    icon: "üîÑ"
  }
];

export default function Index({ publication }: Props) {
  return (
    <AppProvider publication={publication}>
      <Layout>
        <Head>
          <title>{publication.displayTitle || publication.title || 'Network Automation Blog'}</title>
          <meta
            name="description"
            content="Exploring network, automation, cloud infrastructure, and DevOps practices through practical examples and hands-on labs."
          />
          {/* ... rest of the head content ... */}
        </Head>
        <Header />
        <main className="flex-grow">
			<AnimatedHeroSection />



{/* Blog Categories Section */}
<section className="py-16 bg-white">
  <Container>
    <h2 className="text-3xl font-bold text-blue-900 mb-10 text-center">
      What You&apos;ll Learn
    </h2>
    <div className="grid md:grid-cols-3 gap-8">
      {blogCategories.map((category, index) => (
        <div
          key={index}
          className="bg-blue-50 rounded-lg p-8 shadow-md hover:shadow-lg transition-shadow duration-300 transform hover:scale-105"
        >
          <div className="text-4xl text-blue-600 mb-4 flex items-center justify-center">
            {category.icon}
          </div>
          <h3 className="text-2xl font-semibold text-blue-900 mb-4 text-center">
            {category.title}
          </h3>
          <p className="text-slate-800 text-center">
            {category.description}
          </p>
        </div>
      ))}
    </div>
  </Container>
</section>


          {/* Newsletter Section */}
          <section className="py-16 bg-blue-50">
            <Container>
              <div className="max-w-2xl mx-auto text-center">
                <h2 className="text-2xl font-bold text-slate-800 mb-4">
                  Stay Updated
                </h2>
                <p className="text-slate-600 mb-8">
                  Subscribe to receive new tutorials, guides, and automation tips directly in your inbox.
                </p>
                
                  <SubscribeForm />
                
              </div>
            </Container>
          </section>
        </main>
        <Footer />
      </Layout>
    </AppProvider>
  );
}

export const getStaticProps: GetStaticProps<Props> = async () => {
  const data = await request<PostsByPublicationQuery, PostsByPublicationQueryVariables>(
    GQL_ENDPOINT,
    PostsByPublicationDocument,
    {
      first: 10,
      host: process.env.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST,
    },
  );

  const publication = data.publication;
  if (!publication) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      publication,
    },
    revalidate: 1,
  };
};